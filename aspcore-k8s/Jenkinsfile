pipeline {
    agent any
    environment{
        DOCKER_TAG = getDockerTag()
        KUBECONFIG = "/home/ubuntu/.kube/config"
    }

    stages{
        // stage('Dotnet'){
        //     steps{
        //         sh "dotnet --version"
        //     }           
        // }

        stage('Unit tests'){
            steps{
                sh "dotnet test aspcore-k8s.Tests/aspcore-k8s.Tests.csproj"
            }  
        }

        // stage('Build Docker Image'){
        //     steps{
        //         sh "docker build ./aspcore-k8s -t kwazi1984/aspcore-test:${DOCKER_TAG} "
        //     }
        // }
        // stage('DockerHub Push'){
        //     steps{
        //         withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
        //             sh "docker login -u kwazi1984 -p ${dockerHubPwd}"
        //             sh "docker push kwazi1984/aspcore-test:${DOCKER_TAG}"
        //         }
        //     }
        // }
        
        stage('Deploy to Kubernetes'){
            steps{
               
                // sh "kubectl config set-cluster minikube --server=https://10.0.2.15:8443 --certificate-authority=/home/ubuntu/.minikube/ca.crt"
                // sh "kubectl config set-context minikube --cluster=minikube --user=minikube"
                // sh "kubectl config use-context minikube"
                // sh "kubectl config set-credentials minikube --client-certificate=/home/ubuntu/.minikube/client.crt --client-key=/home/ubuntu/.minikube/client.key"

                //sh "kubectl config view"

                sh "kubectl version"

                //sh 'kubectl get pod'

                // withKubeConfig([credentialsId: 'ubuntu', serverUrl: 'https://10.0.2.15:8443']) {
                //     sh 'kubectl get pod'
                // }

                // sshagent(['kops-machine']) {
                //     sh "kubectl version"
                // }


                // sh "chmod +x aspcore-k8s/k8s/changeTag.sh"
                // sh "./aspcore-k8s/k8s/changeTag.sh ${DOCKER_TAG}"

                // script{
                //         try{
                //             sh "kubectl apply -f ./aspcore-k8s/k8s/. -n aspcore-test"
                //         }catch(error){
                //             sh "kubectl create -f ./aspcore-k8s/k8s/. -n aspcore-test"
                //         }
                //     }     

                // sshagent(['kops-machine']) {

                //     sh "scp -o StrictHostKeyChecking=no aspcore-k8s/k8s/k8s-deploy.yaml aspcore-k8s/k8s/k8s-svc-clusterip.yaml aspcore-k8s/k8s/k8s-ingress.yaml ubuntu@10.0.2.15:/home/ubuntu/jenkinks-k8s-ssh/aspcore-test/"
                //     script{
                //         try{
                //             sh "ssh ubuntu@10.0.2.15 kubectl apply -f /home/ubuntu/jenkinks-k8s-ssh/aspcore-test/. -n aspcore-test"
                //         }catch(error){
                //             sh "ssh ubuntu@10.0.2.15 kubectl create -f /home/ubuntu/jenkinks-k8s-ssh/aspcore-test/. n aspcore-test"
                //         }
                //     }
                // }  
            }
        }
    }
}

def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
}